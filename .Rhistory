delta = 1e+10
library(devtools)
library(dplyr)
library(R.matlab)
library(ggplot2)
library(dplyr)
library(tidyr)
library(epimod)
library(patchwork)
library(ggplot2)
library(scales)
# remove.packages("epimod")
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# downloadContainers()
wd = getwd()
# Load custom R scripts for Flux Balance Analysis (FBA) functions and utilities
source(paste0(wd, "/epimod_FBAfunctions/R/FBAgreatmodeClass.R"))    # Core FBA class functions
source(paste0(wd, "/epimod_FBAfunctions/R/class_generation.R"))     # Functions for generating FBA models
source(paste0(wd, "/epimod_FBAfunctions/R/readMat.R"))              # MATLAB file reading utilities
source(paste0(wd, "/epimod_FBAfunctions/R/ex_bounds_module.R"))
source(paste0(wd, "/functions/compiling_mn.R"))
model_name = "BacPN"
mn_name = "Escherichia_coli_str_K_12_substr_MG1655"
org_name = "Escherichia_coli"
abbr = "E_coli"
source(paste0(wd, "/functions/", model_name, "_plot_analysis.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_trace.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_flux.R"))
source(paste0(wd, "/functions/save_sensitivity_results.R"))
# Define the models to be processed
models <- list(list(name = mn_name, type = org_name))
# Create a results directory if it does not already exist
dir.create(paste0(wd, "/results", showWarnings = FALSE))
# Define the output directory for results
dest_dir <- paste0(wd, "/results/")
# Loop through each model for FBA processing
for (model_info in models) {
fba_name <- model_info$name    # Extract the model name
model_type <- model_info$type    # Extract the model type
# Construct file paths for FBA input
fba_fname <- paste0(fba_name, ".txt")
matfile <- paste0(wd, '/input/', model_type, "/", fba_name, ".mat")
cat("METABOLIC NETWORK: ", fba_name, " ( ", model_type, " )\n")
# Check if the .mat file exists
if (!file.exists(matfile)) {
stop(paste("File not found:", matfile))  # Stop execution if file is missing
}
# Generate the model for the specified .mat file
cat("Generating model for:", fba_name, "\n")
model <- FBA4Greatmod.generation(fba_mat = matfile)
# Set biomass parameters for the FBA model
model <- setBiomassParameters(model, bioMax = 1.172, bioMean = 0.489, bioMin = 0.083)
# Prepare the output path for .rds files
output_rds_path <- paste0(wd, "/input/", model_type)
files_to_move <- list.files(pattern = "\\.rds$", full.names = TRUE)
# Move .rds files to the appropriate directory
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(output_rds_path, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
}
### Setting Upper Bounds for FBA reactions and Not FBA reactions ###
# To compile metabolic model
#
# FBA Model Processing Functions
#
# This script contains functions for processing FBA  models.
# It includes functionality for model generation, parameter setting, and file handling.
FBA_PARAMETERS <- list(biomass = list(max = 1.172, mean = 0.489, min = 0.083),
model_tags = list(name = mn_name, type = org_name))
process_fba_models(working_dir = NULL, list(FBA_PARAMETERS$model_tags))
# This function extracts all the specified EX_ reactions from the provided models (bacteria_files)
# and calculates their lower bound as (bacteria_counts*biomass)/MW.
# NotFBA exchange reactions LOWER BOUNDS are denoting metabolite concentration units.
# Essential unit conversions include:
#
# - Biomass in grams of dry weight (gDW)
# - Environmental volume in milliliters (mL)
# - Metabolite concentration in millimolar (mM = mmol/L = 0.001 mmol/mL)
#
# The environment is defined by volume (V) bacterial cell counts, and medium composition.
# Conversion between molar concentrations and absolute quantities follows:
# Define the FBA models and associated counts
bacteria_models <- paste0(wd, "/results/", mn_name, ".txt")
bacteria_counts <- 1 # (cells)
molar = 0.001 # mmol/mL (1 mM)
V = 0.001 # mL (1 microL)
C = molar*V # mmol
biomass = 1e-12 # gWD
new_bounds = C
run_full_ex_bounds(
extraction_output  = "extracted_ex_reactions.txt", # Output file for extracted reactions
bacteria_files     = bacteria_models,              # List of FBA models to process
output_dir         = "results_ex_reactions",       # Directory to store results
bacteria_counts    = (bacteria_counts*biomass),
non_fba_base_bound = C,
reaction_version   = "r" # "r", "f" and "both" (default)
)
paste0("double V = ", V, "; // (mL) (1 microL)")
# Read the C++ file
cpp_file_path <- paste0(wd, "/input/General_functions.cpp")
cpp_file_path
cpp_content <- readLines(cpp_file_path)
cpp_content
# Define the new variables to insert
new_variables <- c(
paste0("double V = ", V, "; // (mL) (1 microL)"),
paste0("long long int delta = ", delta, "; // (cell/mL)")
)
delta = 1e+10 # density
# Define the new variables to insert
new_variables <- c(
paste0("double V = ", V, "; // (mL) (1 microL)"),
paste0("long long int delta = ", delta, "; // (cell/mL)")
)
new_variables
which(cpp_content == "")[1]
# Find position after includes and namespace (looking for first empty line)
insert_position <- which(cpp_content == "")[1]
# Adjust General_functions.cpp
delta = 1e+10 # density
# Read the C++ file
cpp_file_path <- paste0(wd, "/input/General_functions.cpp")
cpp_content <- readLines(cpp_file_path)
# Define the new variables to insert
new_variables <- c(
paste0("double V = ", V, "; // (mL) (1 microL)"),
paste0("long long int delta = ", delta, "; // (cell/mL)")
)
# Find position after includes and namespace (looking for first empty line)
insert_position <- which(cpp_content == "")[1]
# Insert the new variables after the includes
cpp_content <- c(
cpp_content[1:insert_position],
new_variables,
cpp_content[(insert_position+1):length(cpp_content)]
)
# Write the modified content back to the file
writeLines(cpp_content, cpp_file_path)
library(devtools)
library(dplyr)
library(R.matlab)
library(ggplot2)
library(dplyr)
library(tidyr)
library(epimod)
library(patchwork)
library(ggplot2)
library(scales)
# remove.packages("epimod")
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# downloadContainers()
wd = getwd()
# Load custom R scripts for Flux Balance Analysis (FBA) functions and utilities
source(paste0(wd, "/epimod_FBAfunctions/R/FBAgreatmodeClass.R"))    # Core FBA class functions
source(paste0(wd, "/epimod_FBAfunctions/R/class_generation.R"))     # Functions for generating FBA models
source(paste0(wd, "/epimod_FBAfunctions/R/readMat.R"))              # MATLAB file reading utilities
source(paste0(wd, "/epimod_FBAfunctions/R/ex_bounds_module.R"))
source(paste0(wd, "/functions/compiling_mn.R"))
model_name = "BacPN"
mn_name = "Escherichia_coli_str_K_12_substr_MG1655"
org_name = "Escherichia_coli"
abbr = "E_coli"
source(paste0(wd, "/functions/", model_name, "_plot_analysis.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_trace.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_flux.R"))
source(paste0(wd, "/functions/save_sensitivity_results.R"))
# Define the models to be processed
models <- list(list(name = mn_name, type = org_name))
# Create a results directory if it does not already exist
dir.create(paste0(wd, "/results", showWarnings = FALSE))
# Define the output directory for results
dest_dir <- paste0(wd, "/results/")
# Loop through each model for FBA processing
for (model_info in models) {
fba_name <- model_info$name    # Extract the model name
model_type <- model_info$type    # Extract the model type
# Construct file paths for FBA input
fba_fname <- paste0(fba_name, ".txt")
matfile <- paste0(wd, '/input/', model_type, "/", fba_name, ".mat")
cat("METABOLIC NETWORK: ", fba_name, " ( ", model_type, " )\n")
# Check if the .mat file exists
if (!file.exists(matfile)) {
stop(paste("File not found:", matfile))  # Stop execution if file is missing
}
# Generate the model for the specified .mat file
cat("Generating model for:", fba_name, "\n")
model <- FBA4Greatmod.generation(fba_mat = matfile)
# Set biomass parameters for the FBA model
model <- setBiomassParameters(model, bioMax = 1.172, bioMean = 0.489, bioMin = 0.083)
# Prepare the output path for .rds files
output_rds_path <- paste0(wd, "/input/", model_type)
files_to_move <- list.files(pattern = "\\.rds$", full.names = TRUE)
# Move .rds files to the appropriate directory
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(output_rds_path, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
}
### Setting Upper Bounds for FBA reactions and Not FBA reactions ###
# To compile metabolic model
#
# FBA Model Processing Functions
#
# This script contains functions for processing FBA  models.
# It includes functionality for model generation, parameter setting, and file handling.
FBA_PARAMETERS <- list(biomass = list(max = 1.172, mean = 0.489, min = 0.083),
model_tags = list(name = mn_name, type = org_name))
process_fba_models(working_dir = NULL, list(FBA_PARAMETERS$model_tags))
# This function extracts all the specified EX_ reactions from the provided models (bacteria_files)
# and calculates their lower bound as (bacteria_counts*biomass)/MW.
# NotFBA exchange reactions LOWER BOUNDS are denoting metabolite concentration units.
# Essential unit conversions include:
#
# - Biomass in grams of dry weight (gDW)
# - Environmental volume in milliliters (mL)
# - Metabolite concentration in millimolar (mM = mmol/L = 0.001 mmol/mL)
#
# The environment is defined by volume (V) bacterial cell counts, and medium composition.
# Conversion between molar concentrations and absolute quantities follows:
# Define the FBA models and associated counts
bacteria_models <- paste0(wd, "/results/", mn_name, ".txt")
bacteria_counts <- 1 # (cells)
molar = 0.001 # mmol/mL (1 mM)
V = 0.001 # mL (1 microL)
C = molar*V # mmol
biomass = 1e-12 # gWD
new_bounds = C
run_full_ex_bounds(
extraction_output  = "extracted_ex_reactions.txt", # Output file for extracted reactions
bacteria_files     = bacteria_models,              # List of FBA models to process
output_dir         = "results_ex_reactions",       # Directory to store results
bacteria_counts    = (bacteria_counts*biomass),
non_fba_base_bound = C,
reaction_version   = "r" # "r", "f" and "both" (default)
)
delta
delta = 1e+10 # density
# Read the C++ file
cpp_file_path <- paste0(wd, "/input/General_functions.cpp")
cpp_content <- readLines(cpp_file_path)
# Define the new variables to insert
new_variables <- c(
paste0("double V = ", V, "; // (mL) (1 microL)"),
paste0("long long int delta = ", delta, "; // (cell/mL)")
)
new_variables
# Find position after includes and namespace (looking for first empty line)
insert_position <- which(cpp_content == "")[1]
insert_position
c(
cpp_content[1:insert_position],
new_variables,
cpp_content[(insert_position+1):length(cpp_content)]
)
cpp_content
insert_position
cpp_content[20]
cpp_content[c(19, 20)]
new_variables
c(
cpp_content[c(19, 20)],
new_variables,
cpp_content[length(cpp_content)]
)
c(
cpp_content[1:insert_position],
new_variables,
cpp_content[(insert_position+1):length(cpp_content)]
)
insert_position
cpp_content[1:insert_position]
c(
cpp_content[1:19],
new_variables,
cpp_content[(19+1):length(cpp_content)]
)
cpp_content[1:18]
cpp_content[1:17]
new_variables
c(
cpp_content[1:17],
new_variables,
cpp_content[(20):length(cpp_content)]
)
library(devtools)
library(dplyr)
library(R.matlab)
library(ggplot2)
library(dplyr)
library(tidyr)
library(epimod)
library(patchwork)
library(ggplot2)
library(scales)
# remove.packages("epimod")
# install_github("https://github.com/qBioTurin/epimod", ref="epimod_pFBA")
# downloadContainers()
wd = getwd()
# Load custom R scripts for Flux Balance Analysis (FBA) functions and utilities
source(paste0(wd, "/epimod_FBAfunctions/R/FBAgreatmodeClass.R"))    # Core FBA class functions
source(paste0(wd, "/epimod_FBAfunctions/R/class_generation.R"))     # Functions for generating FBA models
source(paste0(wd, "/epimod_FBAfunctions/R/readMat.R"))              # MATLAB file reading utilities
source(paste0(wd, "/epimod_FBAfunctions/R/ex_bounds_module.R"))
source(paste0(wd, "/functions/compiling_mn.R"))
model_name = "BacPN"
mn_name = "Escherichia_coli_str_K_12_substr_MG1655"
org_name = "Escherichia_coli"
abbr = "E_coli"
source(paste0(wd, "/functions/", model_name, "_plot_analysis.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_trace.R"))
source(paste0(wd, "/functions/", model_name, "_plot_sensitivity_flux.R"))
source(paste0(wd, "/functions/save_sensitivity_results.R"))
# Define the models to be processed
models <- list(list(name = mn_name, type = org_name))
# Create a results directory if it does not already exist
dir.create(paste0(wd, "/results", showWarnings = FALSE))
# Define the output directory for results
dest_dir <- paste0(wd, "/results/")
# Loop through each model for FBA processing
for (model_info in models) {
fba_name <- model_info$name    # Extract the model name
model_type <- model_info$type    # Extract the model type
# Construct file paths for FBA input
fba_fname <- paste0(fba_name, ".txt")
matfile <- paste0(wd, '/input/', model_type, "/", fba_name, ".mat")
cat("METABOLIC NETWORK: ", fba_name, " ( ", model_type, " )\n")
# Check if the .mat file exists
if (!file.exists(matfile)) {
stop(paste("File not found:", matfile))  # Stop execution if file is missing
}
# Generate the model for the specified .mat file
cat("Generating model for:", fba_name, "\n")
model <- FBA4Greatmod.generation(fba_mat = matfile)
# Set biomass parameters for the FBA model
model <- setBiomassParameters(model, bioMax = 1.172, bioMean = 0.489, bioMin = 0.083)
# Prepare the output path for .rds files
output_rds_path <- paste0(wd, "/input/", model_type)
files_to_move <- list.files(pattern = "\\.rds$", full.names = TRUE)
# Move .rds files to the appropriate directory
if (length(files_to_move) > 0) {
sapply(files_to_move, function(f) {
file.rename(from = f, to = file.path(output_rds_path, basename(f)))
})
} else {
cat("No .rds files found for", fba_name, "\n")
}
}
### Setting Upper Bounds for FBA reactions and Not FBA reactions ###
# To compile metabolic model
#
# FBA Model Processing Functions
#
# This script contains functions for processing FBA  models.
# It includes functionality for model generation, parameter setting, and file handling.
FBA_PARAMETERS <- list(biomass = list(max = 1.172, mean = 0.489, min = 0.083),
model_tags = list(name = mn_name, type = org_name))
process_fba_models(working_dir = NULL, list(FBA_PARAMETERS$model_tags))
# This function extracts all the specified EX_ reactions from the provided models (bacteria_files)
# and calculates their lower bound as (bacteria_counts*biomass)/MW.
# NotFBA exchange reactions LOWER BOUNDS are denoting metabolite concentration units.
# Essential unit conversions include:
#
# - Biomass in grams of dry weight (gDW)
# - Environmental volume in milliliters (mL)
# - Metabolite concentration in millimolar (mM = mmol/L = 0.001 mmol/mL)
#
# The environment is defined by volume (V) bacterial cell counts, and medium composition.
# Conversion between molar concentrations and absolute quantities follows:
# Define the FBA models and associated counts
bacteria_models <- paste0(wd, "/results/", mn_name, ".txt")
bacteria_counts <- 1 # (cells)
molar = 0.001 # mmol/mL (1 mM)
V = 0.001 # mL (1 microL)
C = molar*V # mmol
biomass = 1e-12 # gWD
new_bounds = C
run_full_ex_bounds(
extraction_output  = "extracted_ex_reactions.txt", # Output file for extracted reactions
bacteria_files     = bacteria_models,              # List of FBA models to process
output_dir         = "results_ex_reactions",       # Directory to store results
bacteria_counts    = (bacteria_counts*biomass),
non_fba_base_bound = C,
reaction_version   = "r" # "r", "f" and "both" (default)
)
